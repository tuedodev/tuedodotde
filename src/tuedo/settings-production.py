"""
Django settings for tuedo project (Production Mode).

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import json
from django.utils.translation import gettext_lazy as _

with open('/etc/env-production.json') as env_file:
	ENVIRONMENT = json.load(env_file)

os.environ['DJANGO_SETTINGS_MODULE'] = 'tuedo.settings'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENVIRONMENT.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT.get('DEBUG') == 'True'
ALLOWED_HOSTS = ENVIRONMENT.get('ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'meta',
    'ckeditor',
    'ckeditor_uploader',
    'mathfilters',
    'werkstatt',
    'mail',
]

SITE_ID = 1
META_SITE_PROTOCOL = ENVIRONMENT.get('META_SITE_PROTOCOL')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'werkstatt.middleware.ForceCsrfCookieMiddleware',
]

ROOT_URLCONF = 'tuedo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'werkstatt.context_processors.get_subscription_form',
                'werkstatt.context_processors.getConfigData',
                'werkstatt.context_processors.getDefaultMetaTags',
            ],
        },
    },
]

WSGI_APPLICATION = 'tuedo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': ENVIRONMENT.get('DB_ENGINE'),
        'NAME': ENVIRONMENT.get('DB_NAME'), 
        'USER': ENVIRONMENT.get('DB_USER'), 
        'PASSWORD': ENVIRONMENT.get('DB_PASSWORD'),
        'HOST': ENVIRONMENT.get('DB_HOST'), 
        'PORT': ENVIRONMENT.get('DB_PORT'),
    }
}

# Backup DB: https://django-dbbackup.readthedocs.io/en/master/index.html
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': os.path.join(BASE_DIR, 'backup')}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'de'

LANGUAGES = (
    ('de', _('Deutsch')),
    ('en', _('Englisch')),
)

LOCALE_PATHS = [os.path.join(BASE_DIR, "locale"),]

TIME_ZONE = 'Europe/Berlin'

USE_I18N = False

USE_L10N = True

USE_L10N = True

DEFAULT_CHARSET = 'utf-8'

# E-Mail
EMAIL_BACKEND = ENVIRONMENT.get('EMAIL_BACKEND')
AWS_ACCESS_KEY_ID = ENVIRONMENT.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = ENVIRONMENT.get('AWS_SECRET_ACCESS_KEY')
AWS_SES_REGION_NAME = ENVIRONMENT.get('AWS_SES_REGION_NAME')
AWS_SES_REGION_ENDPOINT = ENVIRONMENT.get('AWS_SES_REGION_ENDPOINT')

CSRF_TRUSTED_ORIGINS = ['.127.0.0.1']

X_FRAME_OPTIONS = ENVIRONMENT.get('X_FRAME_OPTIONS_PRODUCTION')
if DEBUG is True:
    X_FRAME_OPTIONS = ENVIRONMENT.get('X_FRAME_OPTIONS_DEBUG')
    
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATICFILES_FONTS = os.path.join(BASE_DIR, 'static/fonts')
VENV_PATH = os.path.dirname(BASE_DIR)

#static_root / media_root are folders for production
#files are copied via collectstatic from STATIC_URL (MEDIA...) to STATIC_ROOT (MEDIA_ROOT)
STATIC_ROOT = os.path.join(VENV_PATH, 'static_root')
MEDIA_ROOT = os.path.join(VENV_PATH, 'media_root')

CKEDITOR_UPLOAD_PATH = "uploads/"
#CKEDITOR_BASEPATH = os.path.join(VENV_PATH, 'static_root')"/my_static/ckeditor/ckeditor/"
#FILEBROWSER_MEDIA_ROOT = ''
#FILEBROWSER_MEDIA_URL = '/media/'

META_SITE_PROTOCOL = ENVIRONMENT.get('META_SITE_PROTOCOL')
META_SITE_DOMAIN = ENVIRONMENT.get('META_SITE_DOMAIN')
META_USE_TITLE_TAG = True
META_USE_OG_PROPERTIES = True
META_USE_TWITTER_PROPERTIES = True
META_USE_SCHEMAORG_PROPERTIES = True

CKEDITOR_CONFIGS = {
    'default': {
        'skin': 'moono-lisa',
        'toolbar_Basic': [
            ['Source', '-', 'Bold', 'Italic']
        ],
        'toolbar_Full': [
            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', 'Strike', 'SpellChecker', 'Undo', 'Redo'],
            ['Link', 'Unlink', 'Anchor'],
            ['Image', 'Blockquote', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['SpecialChar'], ['CodeSnippet'], ['Source'],
        ],
        'toolbar': 'Full',
        'height': 291,
        'width': 835,
        'filebrowserWindowWidth': 940,
        'filebrowserWindowHeight': 725,
        'startupMode': 'source',
        'entities': False,
        'basicEntities': False,
        'allowedContent': True,
        'extraPlugins': 'codesnippet',
    }
}
